name: build Community Shaders and addons

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  translate:
    name: translate plugin
    runs-on: ubuntu-latest
    env:
      ISO: .github/workflows/iso.json
      TRANSLATION_FILES: package/Interface/Translations/
      TRANSLATION_CACHE: locales/
      WHITELIST_FILES: CommunityShaders_english.txt
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: pull files from Lokalise
          uses: lokalise/lokalise-pull-action@v3.1.0
          with:
            api_token: ${{ secrets.LOKALISE_API_TOKEN }}
            project_id: ${{ vars.PROJECT_ID }}
            file_format: json
            flat_naming: true
            translations_path: |
              ${{env.TRANSLATION_CACHE}}
            base_lang: en

        - name: convert json to utf-16-le-bom txt
          run: |
            for file in $TRANSLATION_CACHE/*.json; do
              if [[ -f "$file" ]]; then
                iso_code=$(basename "$file" .json)
                language=$(jq -r --arg iso "$iso_code" '.iso_lang[$iso]' $ISO)
                if [[ -z "$language" || "$language" == "null" ]]; then
                  echo "Warning: ISO code '$iso_code' not found. Skipping $file." >&2
                  continue
                fi
                output_file="$TRANSLATION_FILES/CommunityShaders_${language}.txt"
                if [[ "$(basename "$output_file")" != "$WHITELIST_FILES" ]]; then
                  printf "\xFF\xFE" > "$output_file"
                  jq -r 'to_entries | .[] | "\(.key)\t\(.value)"' "$file" \
                    | sed 's/$/\r/' | iconv -f UTF-8 -t UTF-16LE >> "$output_file"
                fi
              fi
            done

  compile:
    name: build plugin and addons
    runs-on: windows-latest
    steps:
        - uses: actions/checkout@v4
          with:
            submodules: recursive

        - uses: ilammy/msvc-dev-cmd@v1.10.0

        - uses: lukka/run-vcpkg@v11.5
          with:
            vcpkgJsonGlob: vcpkg.json

        - name: cmake configure
          run: cmake -S . --preset=ALL --check-stamp-file "build\CMakeFiles\generate.stamp"

        - name: cmake build
          run: cmake --build build/ALL --config Release

        - name: create a tagged release and upload the archive
          uses: ncipollo/release-action@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            name: Community Shaders ${{ github.ref_name }}
            draft: true
            tag: ${{ github.ref_name }}
            artifacts: "${{ github.workspace }}/dist/*.7z"
